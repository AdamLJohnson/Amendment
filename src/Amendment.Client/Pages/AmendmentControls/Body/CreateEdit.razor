@page "/Amendment/{AmendmentId:int}/Body/Create/{LanguageId:int?}"
@page "/Amendment/{AmendmentId:int}/Body/Edit/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Amendment.Client.Repository
@using Amendment.Shared.Enums
@using Amendment.Shared.Requests
@using Amendment.Shared.Responses
@using Amendment.Shared
@attribute [Authorize(Roles = RoleGroups.AdminTranslatorAmendEditor)]
@inject IAmendmentRepository AmendmentRepository
@inject IAmendmentBodyRepository AmendmentBodyRepository
@inject ILanguageRepository LanguageRepository
@inject ISystemSettingRepository SystemSettingRepository
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@inject IHubEventService HubEventService
@implements IDisposable
<CustomPageTitle>@_title</CustomPageTitle>
<h3>@_amendment.Title</h3>

<Row>
    <Column>
        <EditForm Model="_model" OnValidSubmit="OnSave">
            <Validations @ref="@_fluentValidations" Mode="ValidationMode.Manual" Model="@_model" HandlerType="typeof(FluentValidationHandler)">
                <Validation>
                    <Field>
                        <FieldLabel For="status">Status</FieldLabel>
                        <Select id="status" @bind-SelectedValue="@_model.AmendStatus" TValue="AmendmentBodyStatus">
                            <ChildContent>
                                <Repeater Items="_statusEnumerable">
                                    <ChildContent Context="item">
                                        <SelectItem Value="@item">@item.GetDisplayName()</SelectItem>
                                    </ChildContent>
                                </Repeater>
                            </ChildContent>
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </Select>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel For="language">Language</FieldLabel>
                        <Select id="language" @bind-SelectedValue="@_model.LanguageId" TValue="int">
                            <ChildContent>
                                <Repeater Items="_languages">
                                    <ChildContent Context="item">
                                        <SelectItem Value="@item.Id">@item.LanguageName</SelectItem>
                                    </ChildContent>
                                </Repeater>
                            </ChildContent>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Select>
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel For="amendmentBody">Amendment Body</FieldLabel>
                    @if (_initialized)
                    {
                        <Markdown Value="@_model.AmendBody" id="amendmentBody" ValueChanged="MarkdownValueChanged" UploadImage="false" SpellChecker="false" @ref="_markdown" InsertTexts=@(new MarkdownInsertTexts() {HorizontalRule = new []{"", "**NEWSLIDE**"}, Link = new []{"<u>", "</u>"}, Table = new []{"<span style=\"color: red;\">", "</span>"}})>
                            <Toolbar>
                                <MarkdownToolbarButton Action="MarkdownAction.Bold"/>
                                <MarkdownToolbarButton Action="MarkdownAction.Italic" />
                                <MarkdownToolbarButton Action="MarkdownAction.Strikethrough" />
                                <MarkdownToolbarButton Action="MarkdownAction.Link" Icon="fa fa-underline" />
                                @*<MarkdownToolbarButton Action="MarkdownAction.Table" Icon="fa fa-tint" />*@
                                <MarkdownToolbarButton Action="MarkdownAction.Heading" />
                                <MarkdownToolbarButton Action="MarkdownAction.Quote" Separator />
                                <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" />
                                <MarkdownToolbarButton Action="MarkdownAction.OrderedList" />
                                <MarkdownToolbarButton Action="MarkdownAction.Link" Separator />
                                <MarkdownToolbarButton Action="MarkdownAction.Image" />
                                <MarkdownToolbarButton Action="MarkdownAction.HorizontalRule" Icon="fa fa-plus" Separator />
                            </Toolbar>
                        </Markdown>
                    }
                </Field>
            </Validations>

            <Button Color="Color.Primary" Type="ButtonType.Submit">Save</Button>
        </EditForm>
    </Column>
    <Column Class="amendment-body-tabs">
        <Tabs SelectedTab="@_selectedTab" SelectedTabChanged="SelectedTabChanged">
            <Items>
                <Tab Name="primaryLanguageTab">@_primaryLanguageName</Tab>
                <Tab Name="preview">Preview</Tab>
            </Items>
            <Content>
                <TabPanel Name="primaryLanguageTab" Class="tab-pane">
                    <AmendmentBodyMultiRenderer BodyText="@_primaryLanguageBody.AmendBody"></AmendmentBodyMultiRenderer>
                </TabPanel>
                <TabPanel Name="preview" Class="tab-pane">
                    <Div class="text-preview">
                        <AmendmentBodyMultiRenderer BodyText="@_model.AmendBody"></AmendmentBodyMultiRenderer>
                    </Div>
                </TabPanel>
            </Content>
        </Tabs>
    </Column>
</Row>


@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int AmendmentId { get; set; }
    [Parameter]
    public int? LanguageId { get; set; }
    string _title = "";
    AmendmentBodyRequest _model = new() { AmendBody = "" };
    string _selectedTab = "primaryLanguageTab";

    AmendmentResponse _amendment = new();
    AmendmentBodyResponse _primaryLanguageBody = new() { AmendBody = "", AmendStatus = AmendmentBodyStatus.Ready } ;
    string _primaryLanguageName = "English";

    Validations _fluentValidations = null!;
    Markdown _markdown = null!;
    IEnumerable<AmendmentBodyStatus> _statusEnumerable = Enum.GetValues(typeof(AmendmentBodyStatus)).Cast<AmendmentBodyStatus>();
    List<LanguageResponse> _languages = new();
    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _initialized = true;
            StateHasChanged(); // Trigger render of Markdown now that DOM is ready
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _title = Id == null ? "Create Amendment Body" : "Edit Amendment Body";
        var languages = await LanguageRepository.GetAsync();
        _amendment = await AmendmentRepository.GetAsync(AmendmentId);
        _languages = languages.ToList();

        _primaryLanguageName = _languages.Single(x => x.Id == _amendment.PrimaryLanguageId).LanguageName;

        var primaryBodyId = _amendment.AmendmentBodies.FirstOrDefault(x => x.LanguageId == _amendment.PrimaryLanguageId)?.Id;
        if (primaryBodyId != null)
            _primaryLanguageBody = await AmendmentBodyRepository.GetAsync(AmendmentId, primaryBodyId.Value);

        // Subscribe to real-time updates for amendment bodies
        HubEventService.AmendmentBodyUpdated += AmendmentBodyUpdatedEvent;

        if (Id != null)
        {
            var response = await AmendmentBodyRepository.GetAsync(AmendmentId, Id.Value);
            _model = response.ToRequest();
            if (string.IsNullOrEmpty(_model.AmendBody))
                await _markdown.SetValueAsync(" ");
        }
        else
            await _markdown.SetValueAsync("");

        _languages.RemoveAll(x => _amendment.AmendmentBodies.Any(y => y.LanguageId == x.Id && y.LanguageId != _model.LanguageId));
        if (Id == null)
        {
            if (LanguageId != null)
                _model.LanguageId = LanguageId.Value;
            else
                _model.LanguageId = !_languages.Any() ? 0 : _languages.First().Id;
        }
        if (!_languages.Any())
            _model.LanguageId = 0;
    }

    protected async Task OnSave()
    {
        var isValid = await _fluentValidations.ValidateAll();
        if (string.IsNullOrEmpty(_model.AmendBody))
        {
            await NotificationService.Error("Amendment Body can not be empty", "Error");
            isValid = false;
        }
        if (isValid)
        {
            if (Id == null)
            {
                // Handle creation with specific error handling for duplicate language
                var (response, errorMessage) = await AmendmentBodyRepository.PostAsync(AmendmentId, _model);
                if (response != null)
                {
                    // Success - navigate away
                    NavigationManager.NavigateTo("/Amendment");
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    // Show the specific error message while preserving user input
                    await NotificationService.Error(errorMessage, "Validation Error");
                    // Don't navigate away - keep the form with user's input intact
                }
            }
            else
            {
                // Handle update (existing logic)
                await AmendmentBodyRepository.PutAsync(AmendmentId, Id ?? 0, _model);
                NavigationManager.NavigateTo("/Amendment");
            }
        }
        StateHasChanged();
    }

    private Task MarkdownValueChanged(string value)
    {
        _model.AmendBody = value;
        return Task.CompletedTask;
    }

    private void SelectedTabChanged(string tabName)
    {
        _selectedTab = tabName;
    }

    private async void AmendmentBodyUpdatedEvent(object? sender, SignalRResponse<AmendmentBodyResponse> e)
    {
        // Check if this update is for the current amendment
        if (e.Value.AmendId == AmendmentId)
        {
            // If this is the primary language body, update the display
            if (e.Value.LanguageId == _amendment.PrimaryLanguageId)
            {
                // Store the previous body text to check if it changed
                string previousBodyText = _primaryLanguageBody.AmendBody;

                // Update the primary language body with the new content
                _primaryLanguageBody = e.Value;

                // If the primary language body text has changed and we're editing a non-primary language version
                if (Id != null && _model.LanguageId != _amendment.PrimaryLanguageId &&
                    !string.Equals(previousBodyText, e.Value.AmendBody))
                {
                    // If the current status is Ready, automatically change it to Draft
                    if (_model.AmendStatus == AmendmentBodyStatus.Ready)
                    {
                        _model.AmendStatus = AmendmentBodyStatus.Draft;

                        try
                        {
                            // Get the language name for better messaging
                            var currentLanguageName = _languages.FirstOrDefault(l => l.Id == _model.LanguageId)?.LanguageName ?? "non-primary language";

                            // Show notification using the NotificationService
                            await NotificationService.Warning(
                                $"The {_primaryLanguageName} text has been updated. The status of your {currentLanguageName} translation has been changed to Draft.",
                                "Primary Text Changed");

                            // Log to console for debugging
                            Console.WriteLine($"Toast notification sent: Primary Text Changed");
                        }
                        catch (Exception ex)
                        {
                            // Log any errors that occur when showing the notification
                            Console.WriteLine($"Error showing toast notification: {ex.Message}");
                        }
                    }
                }

                // Force UI refresh
                StateHasChanged();
            }
            // If this is the body we're currently editing, update our model
            else if (Id != null && e.Value.Id == Id.Value)
            {
                // Update our model with the new status (in case it was changed by the server)
                _model.AmendStatus = e.Value.AmendStatus;

                // Force UI refresh
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        // Unsubscribe from events when component is disposed
        HubEventService.AmendmentBodyUpdated -= AmendmentBodyUpdatedEvent;
    }
}

