@using Amendment.Shared.Responses
@using Amendment.Client.Repository
@using Amendment.Shared
@inject IAmendmentRepository AmendmentRepository
@inject ILanguageRepository LanguageRepository
<TableRow>
    <TableRowCell>
        @Model.Title
        <div style="float: right!important">
            @if (Model.IsLive)
            {
                <Badge Color="Color.Danger">LIVE</Badge>
            }
            @if (Model.IsArchived)
            {
                <Badge Color="Color.Secondary">ARCHIVED</Badge>
            }
        </div>
    </TableRowCell>
    <TableRowCell>@Model.Author</TableRowCell>
    <TableRowCell>@Model.Motion</TableRowCell>
    <TableRowCell>
        <Repeater Items="_languages">
            <AmendmentBodyBadge Amendment="@Model" Language="@context"></AmendmentBodyBadge>
            <span></span>
        </Repeater>
    </TableRowCell>
    <TableRowCell TextAlignment="TextAlignment.Center">
        <AuthorizeView Roles="@RoleGroups.AdminScreenController">
            <Authorized>
                @if (Model.IsLive)
                {
                    <Button Color="Color.Success" Type="ButtonType.Link" To=@("/ScreenControl")>Control Screens</Button>
                }
                @if ((LiveAmendmentId ?? 0) == 0)
                {
                    <Button Color="Color.Warning" Clicked="GoLive">Go Live</Button>
                }
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="@RoleGroups.AdminAmendEditor">
            <Authorized>
                <span></span>

                <span></span>
                @if (Model.IsLive)
                {
                    <Dropdown>
                        <Button Color="Color.Primary" Type="ButtonType.Link" To=@($"/Amendment/Edit/{Model.Id}")>Edit</Button>
                        <DropdownToggle Color="Color.Primary" Split />
                        <DropdownMenu>
                            <DropdownItem Color="Color.Info" Clicked="ExportAmendmentToExcel">Export to Excel</DropdownItem>
                            <DropdownItem Color="Color.Info" Clicked="ExportAmendmentToPdf">Export to PDF</DropdownItem>
                            <AuthorizeView Roles="@RoleGroups.Admin">
                                <Authorized Context="AdminContext">
                                    <DropdownDivider/>
                                    <DropdownItem Color="Color.Danger" Clicked="() => _deleteModalRef!.Show()">Delete</DropdownItem>
                                </Authorized>
                            </AuthorizeView>
                        </DropdownMenu>
                    </Dropdown>
                }
                else
                {
                    <Dropdown>
                        <Button Color="Color.Primary" Type="ButtonType.Link" To=@($"/Amendment/Edit/{Model.Id}")>Edit</Button>
                        <DropdownToggle Color="Color.Primary" Split />
                        <DropdownMenu>
                            @if (Model.IsArchived)
                            {
                                <DropdownItem Color="Color.Success" Clicked="() => _unarchiveModalRef!.Show()">Unarchive</DropdownItem>
                            } else
                            {
                                <DropdownItem Color="Color.Warning" Clicked="() => _archiveModalRef!.Show()">Archive</DropdownItem>
                            }
                            <DropdownDivider/>
                            <DropdownItem Color="Color.Info" Clicked="ExportAmendmentToExcel">Export to Excel</DropdownItem>
                            <DropdownItem Color="Color.Info" Clicked="ExportAmendmentToPdf">Export to PDF</DropdownItem>
                            <AuthorizeView Roles="@RoleGroups.Admin">
                                <Authorized Context="AdminContext">
                                    <DropdownDivider/>
                                    <DropdownItem Color="Color.Danger" Clicked="() => _deleteModalRef!.Show()">Delete</DropdownItem>
                                </Authorized>
                            </AuthorizeView>
                        </DropdownMenu>
                    </Dropdown>
                }
            </Authorized>
        </AuthorizeView>
    </TableRowCell>
</TableRow>

<Modal @ref="@_deleteModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete Amendment</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Are you sure you want to delete this amendment?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => _deleteModalRef!.Hide()">Close</Button>
            <Button Color="Color.Primary" Clicked="OnDeleteBtn">Delete</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="@_archiveModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Archive Amendment</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Are you sure you want to archive this amendment?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => _archiveModalRef!.Hide()">Close</Button>
            <Button Color="Color.Primary" Clicked="OnArchiveBtn">Archive</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="@_unarchiveModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Unarchive Amendment</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Are you sure you want to unarchive this amendment?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => _unarchiveModalRef!.Hide()">Close</Button>
            <Button Color="Color.Success" Clicked="OnUnarchiveBtn">Unarchive</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public AmendmentResponse Model { get; set; } = null!;

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public int? LiveAmendmentId { get; set; }

    IEnumerable<LanguageResponse> _languages = Enumerable.Empty<LanguageResponse>();

    private Modal? _deleteModalRef;
    private Modal? _archiveModalRef;
    private Modal? _unarchiveModalRef;

    protected override async Task OnInitializedAsync()
    {
        _languages = await LanguageRepository.GetAsync();
    }

    private async Task OnDeleteBtn()
    {
        await AmendmentRepository.DeleteAsync(Model.Id);
        await _deleteModalRef!.Hide();
#pragma warning disable CS4014
        OnDelete.InvokeAsync();
#pragma warning restore CS4014
    }

    private async Task OnArchiveBtn()
    {
        var amendmentRequest = Model.ToRequest();
        // Set the amendment as archived
        amendmentRequest.IsArchived = true;
        await AmendmentRepository.PutAsync(Model.Id, amendmentRequest);
        await _archiveModalRef!.Hide();
#pragma warning disable CS4014
        OnDelete.InvokeAsync();
#pragma warning restore CS4014
    }

    private async Task OnUnarchiveBtn()
    {
        var amendmentRequest = Model.ToRequest();
        // Set the amendment as not archived
        amendmentRequest.IsArchived = false;
        await AmendmentRepository.PutAsync(Model.Id, amendmentRequest);
        await _unarchiveModalRef!.Hide();
#pragma warning disable CS4014
        OnDelete.InvokeAsync();
#pragma warning restore CS4014
    }

    private async Task GoLive()
    {
        var amendmentRequest = Model.ToRequest();
        amendmentRequest.IsLive = true;
        await AmendmentRepository.PutAsync(Model.Id, amendmentRequest);
    }

    private async Task ExportAmendmentToExcel()
    {
        await AmendmentRepository.ExportToExcelAsync(Model.Id);
    }

    private async Task ExportAmendmentToPdf()
    {
        await AmendmentRepository.ExportToPdfAsync(Model.Id);
    }

}
