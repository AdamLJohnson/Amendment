@using Amendment.Shared.Responses
@using Amendment.Client.Repository
@inject IAmendmentRepository AmendmentRepository
@inject ILanguageRepository LanguageRepository
<TableRow>
    <TableRowCell>
        @_model.Title
        @if (_model.IsLive)
        {
            <div style="float: right!important">
                <Badge Color="Color.Danger">LIVE</Badge>
            </div>
        }
    </TableRowCell>
    <TableRowCell>@_model.Author</TableRowCell>
    <TableRowCell>@_model.Motion</TableRowCell>
    <TableRowCell>
        <Repeater Items="_languages">
            <AmendmentBodyBadge Amendment="@_model" Language="@context"></AmendmentBodyBadge>
        </Repeater>
    </TableRowCell>
    <TableRowCell TextAlignment="TextAlignment.Center">

        @if (_model.IsLive)
        {
            <Button Color="Color.Success">Control Screens</Button> 
        }
        @if ((LiveAmendmentId ?? 0) == 0)
        {
            <Button Color="Color.Warning">Go Live</Button> 
        }
        <span></span>
        <Button Color="Color.Primary" Type="ButtonType.Link" To=@($"/Amendment/Edit/{_model.Id}")>Edit</Button>
        <span></span>
        @if (!_model.IsLive)
        {
            <Button Color="Color.Danger" Clicked="() => modalRef.Show()">Delete</Button>
        }
    </TableRowCell>
</TableRow>

<Modal @ref="@modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete Amendment</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Are you sure you want to delete this amendment?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => modalRef.Hide()">Close</Button>
            <Button Color="Color.Primary" Clicked="OnDeleteBtn">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public AmendmentResponse _model { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public int? LiveAmendmentId { get; set; }

    IEnumerable<LanguageResponse> _languages;

    private Modal? modalRef;

    protected override async Task OnInitializedAsync()
    {
        _languages = await LanguageRepository.GetAsync();
    }

    private async Task OnDeleteBtn()
    {
        await AmendmentRepository.DeleteAsync(_model.Id);
        await modalRef.Hide();
        OnDelete.InvokeAsync();
    }

}
