@page "/Amendment/Create"
@page "/Amendment/Edit/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Amendment.Shared.Requests
@using Amendment.Client.Repository
@using Amendment.Shared.Responses
@using Amendment.Shared
@attribute [Authorize(Roles = RoleGroups.AdminAmendEditor)]
@inject ILanguageRepository LanguageRepository
@inject IAmendmentRepository AmendmentRepository
@inject IAmendmentBodyRepository AmendmentBodyRepository
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService

<CustomPageTitle>@_title</CustomPageTitle>

<h3>
    @_title
    @if (Id != null && _model.IsArchived)
    {
        <Badge Margin="Margin.Is2.FromStart" Color="Color.Secondary">ARCHIVED</Badge>
    }
</h3>

<EditForm Model="_model" OnValidSubmit="OnSave">
    <Validations @ref="@_fluentValidations" Mode="ValidationMode.Manual" Model="@_model" HandlerType="typeof(FluentValidationHandler)">
        <Row>
            <Column ColumnSize="ColumnSize.Is6">
                <Validation>
                    <Field>
                        <FieldLabel For="amendmentTitle">Amendment Title</FieldLabel>
                        <TextEdit id="amendmentTitle" @bind-Text="_model.Title" Placeholder="Amendment Title">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel For="author">Author</FieldLabel>
                        <TextEdit id="author" @bind-Text="_model.Author" Placeholder="Author">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel For="motion">Motion</FieldLabel>
                        <TextEdit id="motion" @bind-Text="_model.Motion" Placeholder="Motion">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel For="source">Source</FieldLabel>
                        <TextEdit id="source" @bind-Text="_model.Source" Placeholder="Source">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel For="legisId">Legislative ID</FieldLabel>
                        <TextEdit id="legisId" @bind-Text="_model.LegisId" Placeholder="Legislative ID">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                @if (Id != null) // Only show archive checkbox for existing amendments
                {
                    <Field>
                        <FieldLabel>Archive Status</FieldLabel>
                        <Check TValue="bool" @bind-Checked="_model.IsArchived">
                            <ChildContent>Archive this amendment</ChildContent>
                        </Check>
                        <FieldHelp>Archived amendments are hidden from the main list by default</FieldHelp>
                    </Field>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <Field>
                    <FieldLabel For="primaryLanguage">Primary Language</FieldLabel>
                    <Select id="primaryLanguage" @bind-SelectedValue="@_model.PrimaryLanguageId" TValue="int">
                        <ChildContent>
                            <Repeater Items="_language">
                                <ChildContent Context="languageItem">
                                    <SelectItem Value="@languageItem.Id">@languageItem.LanguageName</SelectItem>
                                </ChildContent>
                            </Repeater>
                        </ChildContent>
                    </Select>
                </Field>
                @if (Id == null)
                {
                    <Field>
                        <FieldLabel For="amendmentBody">Amendment Body</FieldLabel>
                        <Markdown @bind-Value="@_bodyModel.AmendBody" id="amendmentBody" UploadImage="false" SpellChecker="false" InsertTexts=@(new MarkdownInsertTexts() {HorizontalRule = new []{"", "**NEWSLIDE**"}, Link = new []{"<u>", "</u>"}, Table = new []{"<span style=\"color: red;\">", "</span>"}})>
                            <Toolbar>
                                <MarkdownToolbarButton Action="MarkdownAction.Bold"/>
                                <MarkdownToolbarButton Action="MarkdownAction.Italic" />
                                <MarkdownToolbarButton Action="MarkdownAction.Strikethrough" />
                                <MarkdownToolbarButton Action="MarkdownAction.Link" Icon="fa fa-underline" />
                                @*<MarkdownToolbarButton Action="MarkdownAction.Table" Icon="fa fa-tint" />*@
                                <MarkdownToolbarButton Action="MarkdownAction.Heading" />
                                <MarkdownToolbarButton Action="MarkdownAction.Quote" Separator />
                                <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" />
                                <MarkdownToolbarButton Action="MarkdownAction.OrderedList" />
                                <MarkdownToolbarButton Action="MarkdownAction.Link" Separator />
                                <MarkdownToolbarButton Action="MarkdownAction.Image" />
                                <MarkdownToolbarButton Action="MarkdownAction.HorizontalRule" Icon="fa fa-plus" Separator />
                            </Toolbar>
                        </Markdown>
                    </Field>
                }
                else
                {
                    <AmendmentEditBodies AmendmentId="Id.Value" PrimaryLanguageId="_model.PrimaryLanguageId" AmendmentBodies="_amendmentBodySummaries.ToList()"></AmendmentEditBodies>
                }
            </Column>
        </Row>
    </Validations>

    <Button Color="Color.Primary" Type="ButtonType.Submit">Save</Button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    string _title = "";
    Validations _fluentValidations = null!;
    IEnumerable<LanguageResponse> _language = Enumerable.Empty<LanguageResponse>();
    IEnumerable<AmendmentBodySummary> _amendmentBodySummaries = Enumerable.Empty<AmendmentBodySummary>();

    AmendmentRequest _model = new () { PrimaryLanguageId = 1 };
    readonly AmendmentBodyRequest _bodyModel = new (){ AmendBody = "" };

    protected override async Task OnInitializedAsync()
    {
        _title = Id == null ? "Create Amendment" : "Edit Amendment";
        _language = await LanguageRepository.GetAsync();
        if (Id != null)
        {
            var response = await AmendmentRepository.GetAsync(Id.Value);
            _model = response.ToRequest();
            _amendmentBodySummaries = response.AmendmentBodies;
        }
    }

    protected async Task OnSave()
    {
        var isValid = await _fluentValidations.ValidateAll();
        if (Id == null && string.IsNullOrEmpty(_bodyModel.AmendBody))
        {
            await NotificationService.Error("Amendment Body can not be empty", "Error");
            isValid = false;
        }
        if (isValid)
        {
            if (Id == null)
            {
                var amendModel = await AmendmentRepository.PostAsync(_model);
                _bodyModel.LanguageId = amendModel.PrimaryLanguageId;
                _bodyModel.AmendStatus = Amendment.Shared.Enums.AmendmentBodyStatus.Ready;
                await AmendmentBodyRepository.PostAsync(amendModel.Id, _bodyModel);
            }
            else
                await AmendmentRepository.PutAsync(Id ?? 0, _model);
            NavigationManager.NavigateTo("/Amendment");
        }
        StateHasChanged();
    }

}
