@page "/Amendment"
@using Microsoft.AspNetCore.Authorization
@using Amendment.Shared.Responses
@using Amendment.Client.Repository
@using Amendment.Client.Services
@using Amendment.Shared.Enums
@using Amendment.Shared.SignalRCommands
@implements IDisposable
@attribute [Authorize]
@inject IAmendmentRepository AmendmentRepository
@inject IAmendmentBodyRepository AmendmentBodyRepository
@inject IHubEventService HubEventService
@inject IAmendmentHubCommandService AmendmentHubCommandService

<PageTitle>Amendments</PageTitle>

<h3>Amendments</h3>

<Row>
    <Column>
        @if (_amendments.Any(a => a.IsLive))
        {
            <Button Color="Color.Danger" Clicked="ClearScreens">Clear Screens</Button>
        }
    </Column>
    <Column>

    </Column>
    <Column TextAlignment="TextAlignment.End">
        <Button Color="Color.Success" Type="ButtonType.Link" To="/Amendment/Create">Create Amendment</Button>
    </Column>
</Row>

<Table Striped>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Title</TableHeaderCell>
            <TableHeaderCell>Author</TableHeaderCell>
            <TableHeaderCell>Motion</TableHeaderCell>
            <TableHeaderCell Style="min-width: 200px"></TableHeaderCell>
            <TableHeaderCell Style="min-width: 300px"></TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <Repeater Items="@_amendments">
            <AmendmentTableRow _model="context" OnDelete="RefreshAmendments" LiveAmendmentId="_amendments.SingleOrDefault(x => x.IsLive)?.Id"/>
        </Repeater>
        @if (!_amendments.Any())
        {
            <TableRow>
                <TableRowCell ColumnSpan="5">No Amendments Found</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<h4>Key:</h4>
<Badge Background="Background.Light" TextColor="TextColor.Black50">Not Created</Badge>
<Badge Background="Background.Primary">Not Ready</Badge>
<Badge Background="Background.Success">Is Ready</Badge>
<Badge Background="Background.Danger">Is Live</Badge>


@code {
    List<AmendmentResponse> _amendments = new();

    protected override async Task OnInitializedAsync()
    {
        HubEventService.AmendmentUpdated += AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated += AmendmentBodyUpdatedEvent;
        HubEventService.AmendmentBodyUpdatedMany += AmendmentBodyUpdatedEventMany;
        _amendments = (await AmendmentRepository.GetAsync()).ToList();
    }

    private void AmendmentBodyUpdatedEventMany(object? sender, SignalRResponse<List<AmendmentBodyResponse>> e)
    {
        foreach (var item in e.Value)
        {
            AmendmentBodyUpdatedWork(e.OperationType, item);
        }
        StateHasChanged();
    }

    private void AmendmentBodyUpdatedEvent(object? sender, SignalRResponse<AmendmentBodyResponse> e)
    {
        AmendmentBodyUpdatedWork(e.OperationType, e.Value);
        StateHasChanged();
    }

    private void AmendmentBodyUpdatedWork(OperationType operationType, AmendmentBodyResponse body)
    {
        var amendment = _amendments.SingleOrDefault(x => x.Id == body.AmendId);
        if (amendment == null)
            return;
        var amendmentBodySummary = new AmendmentBodySummary
        {
            Id = body.Id, AmendId = body.AmendId, LanguageId = body.LanguageId, AmendStatus = body.AmendStatus,
            IsLive = body.IsLive
        };
        switch (operationType)
        {
            case OperationType.Create:
                amendment.AmendmentBodies.Add(amendmentBodySummary);
                break;
            case OperationType.Update:
                var i = amendment.AmendmentBodies.FindIndex(x => x.Id == amendmentBodySummary.Id);
                if (i > -1)
                    amendment.AmendmentBodies[i] = amendmentBodySummary;
                break;
            case OperationType.Delete:
                amendment?.AmendmentBodies.RemoveAll(x => x.Id == body.Id);
                break;
        }

        return;
    }

    private void AmendmentUpdatedEvent(object? sender, SignalRResponse<AmendmentResponse> e)
    {
        switch (e.OperationType)
        {
            case OperationType.Create:
                _amendments.Add(e.Value);
                break;
            case OperationType.Update:
                var i = _amendments.FindIndex(x => x.Id == e.Value.Id);
                if(i > -1)
                    _amendments[i] = e.Value;
                break;
            case OperationType.Delete:
                _amendments.RemoveAll(x => x.Id == e.Value.Id);
                break;
        }

        StateHasChanged();
    }

    private Task RefreshAmendments()
    {
        return OnInitializedAsync();
    }

    public void Dispose()
    {
        HubEventService.AmendmentUpdated -= AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated -= AmendmentBodyUpdatedEvent;
        HubEventService.AmendmentBodyUpdatedMany -= AmendmentBodyUpdatedEventMany;
    }

    private async Task ClearScreens()
    {
        var liveAmendment = _amendments.FirstOrDefault(a => a.IsLive);
        if (liveAmendment == null)
            return;
            
        var amendmentId = liveAmendment.Id;
        var amendmentBodies = await AmendmentBodyRepository.GetAsync(amendmentId);

        var amendmentRequest = liveAmendment.ToRequest();
        amendmentRequest.IsLive = false;

        await AmendmentHubCommandService.SetAmendmentBodyLiveAsync(amendmentBodies.Where(x => x.IsLive).Select(x => new SetAmendmentBodyLiveCommand() { AmendId = amendmentId, Id = x.Id, IsLive = false }).ToArray());
        await AmendmentRepository.PutAsync(amendmentId, amendmentRequest);
    }

}
