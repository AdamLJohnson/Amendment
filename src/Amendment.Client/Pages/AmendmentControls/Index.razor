@page "/Amendment"
@using Microsoft.AspNetCore.Authorization
@using Amendment.Shared.Responses
@using Amendment.Client.Repository
@using Amendment.Shared
@using Amendment.Client.Services
@using Amendment.Shared.Enums
@using Amendment.Shared.SignalRCommands
@implements IDisposable
@attribute [Authorize]
@inject IAmendmentRepository AmendmentRepository
@inject IAmendmentBodyRepository AmendmentBodyRepository
@inject IHubEventService HubEventService
@inject IAmendmentHubCommandService AmendmentHubCommandService

<CustomPageTitle>Amendments</CustomPageTitle>

<h3>Amendments</h3>

<Row>
    <Column>
        <AuthorizeView Roles="@RoleGroups.AdminScreenController">
            <Authorized>
                @if (_amendments.Any(a => a.IsLive))
                {
                    <Button Color="Color.Danger" Clicked="ClearScreens">Clear Screens</Button>
                }
            </Authorized>
        </AuthorizeView>
    </Column>
    <Column TextAlignment="TextAlignment.End">
        <AuthorizeView Roles="@RoleGroups.AdminAmendEditor">
            <Button Color="Color.Success" Type="ButtonType.Link" To="/Amendment/Create">Create Amendment</Button>
        </AuthorizeView>
    </Column>
</Row>

<Table Striped>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Title</TableHeaderCell>
            <TableHeaderCell>Author</TableHeaderCell>
            <TableHeaderCell>Motion</TableHeaderCell>
            <TableHeaderCell Style="min-width: 200px"></TableHeaderCell>
            <TableHeaderCell Style="min-width: 300px"></TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <Repeater Items="@_amendments">
            <AmendmentTableRow Model="context" OnDelete="RefreshAmendments" LiveAmendmentId="_amendments.SingleOrDefault(x => x.IsLive)?.Id"/>
        </Repeater>
        @if (!_amendments.Any())
        {
            <TableRow>
                <TableRowCell ColumnSpan="5">No Amendments Found</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<Row>
    <Column>
        <h4>Key:</h4>
        <Badge Background="Background.Light" TextColor="TextColor.Black50">Not Created</Badge>
        <Badge Background="Background.Primary">Not Ready</Badge>
        <Badge Background="Background.Success">Is Ready</Badge>
        <Badge Background="Background.Danger">Is Live</Badge>
    </Column>
    <Column TextAlignment="TextAlignment.Center">
        <AuthorizeView Roles="@RoleGroups.AdminAmendEditor">
            <Authorized>
                <Check TValue="bool" @bind-Checked="ShowArchived">
                    <ChildContent>Show Archived Amendments</ChildContent>
                </Check>
            </Authorized>
        </AuthorizeView>
    </Column>
    <Column TextAlignment="TextAlignment.End">
    </Column>
</Row>


@code {
    List<AmendmentResponse> _amendments = new();
    List<AmendmentResponse> _allAmendments = new();
    private bool _showArchived = false;

    // This property is used to handle the checkbox binding and trigger filtering
    private bool ShowArchived
    {
        get => _showArchived;
        set
        {
            if (_showArchived != value)
            {
                _showArchived = value;
                FilterAmendments();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HubEventService.AmendmentUpdated += AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated += AmendmentBodyUpdatedEvent;
        HubEventService.AmendmentBodyUpdatedMany += AmendmentBodyUpdatedEventMany;
        await LoadAmendments();
    }

    private async Task LoadAmendments()
    {
        _allAmendments = (await AmendmentRepository.GetAsync()).ToList();
        FilterAmendments();
    }

    private void FilterAmendments()
    {
        _amendments = _showArchived
            ? _allAmendments.ToList()
            : _allAmendments.Where(a => !a.IsArchived).ToList();
        StateHasChanged();
    }

    private void AmendmentBodyUpdatedEventMany(object? sender, SignalRResponse<List<AmendmentBodyResponse>> e)
    {
        foreach (var item in e.Value)
        {
            AmendmentBodyUpdatedWork(e.OperationType, item);
        }
        StateHasChanged();
    }

    private void AmendmentBodyUpdatedEvent(object? sender, SignalRResponse<AmendmentBodyResponse> e)
    {
        AmendmentBodyUpdatedWork(e.OperationType, e.Value);
        StateHasChanged();
    }

    private void AmendmentBodyUpdatedWork(OperationType operationType, AmendmentBodyResponse body)
    {
        var amendment = _amendments.SingleOrDefault(x => x.Id == body.AmendId);
        if (amendment == null)
            return;
        var amendmentBodySummary = new AmendmentBodySummary
        {
            Id = body.Id, AmendId = body.AmendId, LanguageId = body.LanguageId, AmendStatus = body.AmendStatus,
            IsLive = body.IsLive
        };
        switch (operationType)
        {
            case OperationType.Create:
                amendment.AmendmentBodies.Add(amendmentBodySummary);
                break;
            case OperationType.Update:
                var i = amendment.AmendmentBodies.FindIndex(x => x.Id == amendmentBodySummary.Id);
                if (i > -1)
                    amendment.AmendmentBodies[i] = amendmentBodySummary;
                break;
            case OperationType.Delete:
                amendment?.AmendmentBodies.RemoveAll(x => x.Id == body.Id);
                break;
        }

        return;
    }

    private void AmendmentUpdatedEvent(object? sender, SignalRResponse<AmendmentResponse> e)
    {
        // Update the full list of amendments first
        switch (e.OperationType)
        {
            case OperationType.Create:
                _allAmendments.Add(e.Value);
                break;
            case OperationType.Update:
                var i = _allAmendments.FindIndex(x => x.Id == e.Value.Id);
                if(i > -1)
                    _allAmendments[i] = e.Value;
                break;
            case OperationType.Delete:
                _allAmendments.RemoveAll(x => x.Id == e.Value.Id);
                break;
        }

        // Then apply the filter
        FilterAmendments();
    }

    private Task RefreshAmendments()
    {
        return LoadAmendments();
    }

    public void Dispose()
    {
        HubEventService.AmendmentUpdated -= AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated -= AmendmentBodyUpdatedEvent;
        HubEventService.AmendmentBodyUpdatedMany -= AmendmentBodyUpdatedEventMany;
    }

    private async Task ClearScreens()
    {
        var liveAmendment = _amendments.FirstOrDefault(a => a.IsLive);
        if (liveAmendment == null)
            return;

        var amendmentId = liveAmendment.Id;
        var amendmentBodies = await AmendmentBodyRepository.GetAsync(amendmentId);

        var amendmentRequest = liveAmendment.ToRequest();
        amendmentRequest.IsLive = false;

        await AmendmentHubCommandService.SetAmendmentBodyLiveAsync(amendmentBodies.Where(x => x.IsLive).Select(x => new SetAmendmentBodyLiveCommand() { AmendId = amendmentId, Id = x.Id, IsLive = false }).ToArray());
        await AmendmentRepository.PutAsync(amendmentId, amendmentRequest);
    }

}
