@page "/ScreenControl"
@using Microsoft.AspNetCore.Authorization
@using Amendment.Client.Repository
@using Amendment.Shared.Enums
@using Amendment.Shared.Responses
@attribute [Authorize]
@implements IDisposable
@inject IAmendmentRepository AmendmentRepository
@inject ILanguageRepository LanguageRepository
@inject IHubEventService HubEventService

<PageTitle>Screen Control</PageTitle>
<h3>Screen Control</h3>

@if (_amendment != null)
{
    <Row>
        <Column ColumnSize="ColumnSize.Is3">
            <Field>
                <FieldLabel>Title</FieldLabel>
                <p>@_amendment.Title</p>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3">
            <Field>
                <FieldLabel>Author</FieldLabel>
                <p>@_amendment.Author</p>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3">
            <Field>
                <FieldLabel>Motion</FieldLabel>
                <p>@_amendment.Motion</p>
            </Field>
        </Column>
    </Row>
    <hr />
    <h4>Amendment Texts</h4>
    <Row>
        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
            <Button Color="Color.Success">Change Views</Button>
        </Column>
        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
            @if (_amendment.AmendmentBodies.Any(x => x.IsLive))
            {
                <Button Color="Color.Danger" Block Size="Size.Large">Take all down</Button>
            }
            else
            {
                <Button Color="Color.Success" Block Size="Size.Large">All Go Live</Button>
            }
        </Column>
        <Column ColumnSize="ColumnSize.Is4.OnDesktop" TextAlignment="TextAlignment.End">
            <Button Color="Color.Warning">Reset All</Button>
            <Button Color="Color.Info">All Prev</Button>
            <Button Color="Color.Info">All Next</Button>
        </Column>
    </Row>
    <Row Style="margin-top:10px;">
        <Repeater Items="_amendment.AmendmentBodies.OrderBy(x => x.Id)">
            <Column ColumnSize="ColumnSize.Is4.OnDesktop">
                <h5>
                    <Row>
                        <Column>
                            @_languages.First(x => x.Id == context.LanguageId).LanguageName
                            <Icon Name="IconName.ArrowUp"></Icon>
                            <Icon Name="IconName.ArrowDown"></Icon>
                        </Column>
                        <Column TextAlignment="TextAlignment.End">
                            @if (_amendment.PrimaryLanguageId == context.LanguageId)
                            {
                                <Badge Color="Color.Primary">PRIMARY</Badge>
                                <span></span>
                            }
                            <Badge Background=@(context.IsLive ? Background.Danger : Background.Info)>LIVE</Badge>
                        </Column>
                    </Row>
                </h5>
                <Div Class="small-screen-container well text-preview fill-well">
                    <div>
                        <AmendmentBodyMultiRenderer BodyText="@context.AmendBody"></AmendmentBodyMultiRenderer>
                    </div>
                </Div>
                <Div TextAlignment="TextAlignment.Center">
                    @if (!context.IsLive)
                    {
                        <Button Color="Color.Success">GO LIVE</Button>
                    }
                    else
                    {
                        <Button Color="Color.Danger">TAKE DOWN</Button>
                    }
                </Div>
            </Column>

        </Repeater>
    </Row>
}
else
{
    <h4>No amendments are currently live</h4>
    <Button Color="Color.Primary" Type="ButtonType.Link" To=@("/Amendment")>Go to Amendments</Button>
}

@code {
    AmendmentFullBodyResponse? _amendment = null;
    List<LanguageResponse> _languages = new();
    protected override async Task OnInitializedAsync()
    {
        _languages = (await LanguageRepository.GetAsync()).ToList();
        _amendment = await AmendmentRepository.GetLiveAsync();
        HubEventService.AmendmentUpdated += AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated += AmendmentBodyUpdatedEvent;
        HubEventService.ClearScreens += ClearScreensEvent;
    }
    
    private void AmendmentBodyUpdatedEvent(object? sender, SignalRResponse<AmendmentBodyResponse> e)
    {
        if (_amendment == null)
            return;
        if (_amendment.Id != e.Value.AmendId)
            return;
            
        switch (e.OperationType)
        {
            case OperationType.Create:
                _amendment.AmendmentBodies.Add(e.Value);
                break;
            case OperationType.Update:
                var i = _amendment.AmendmentBodies.FindIndex(x => x.Id == e.Value.Id);
                if (i > -1)
                    _amendment.AmendmentBodies[i] = e.Value;
                break;
            case OperationType.Delete:
                _amendment?.AmendmentBodies.RemoveAll(x => x.Id == e.Value.Id);
                break;
        }

        StateHasChanged();
    }

    private async void AmendmentUpdatedEvent(object? sender, SignalRResponse<AmendmentResponse> e)
    {
        if (e.Value.IsLive)
        {
            _amendment = await AmendmentRepository.GetLiveAsync();
            StateHasChanged();
            return;
        }


        if (_amendment != null && _amendment.Id == e.Value.Id && !e.Value.IsLive)
        {
            _amendment = null;
            StateHasChanged();
            return;
        }
    }

    private void ClearScreensEvent(object? sender, EventArgs e) => _amendment = null;

    public void Dispose()
    {
        HubEventService.AmendmentUpdated -= AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated -= AmendmentBodyUpdatedEvent;
        HubEventService.ClearScreens -= ClearScreensEvent;
    }

}
