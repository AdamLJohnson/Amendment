@page "/ScreenControl"
@using Microsoft.AspNetCore.Authorization
@using Amendment.Client.Repository
@using Amendment.Client.Services
@using Amendment.Shared.Enums
@using Amendment.Shared.Responses
@using Amendment.Shared.SignalRCommands
@attribute [Authorize]
@implements IDisposable
@inject IAmendmentRepository AmendmentRepository
@inject ILanguageRepository LanguageRepository
@inject IHubEventService HubEventService
@inject IAmendmentHubCommandService AmendmentHubCommandService

<PageTitle>Screen Control</PageTitle>
<h3>Screen Control</h3>

@if (_amendment != null)
{
    <Row>
        <Column ColumnSize="ColumnSize.Is3">
            <Field>
                <FieldLabel>Title</FieldLabel>
                <p>@_amendment.Title</p>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3">
            <Field>
                <FieldLabel>Author</FieldLabel>
                <p>@_amendment.Author</p>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3">
            <Field>
                <FieldLabel>Motion</FieldLabel>
                <p>@_amendment.Motion</p>
            </Field>
        </Column>
    </Row>
    <hr />
    <h4>Amendment Texts</h4>
    <Row>
        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
            <Button Color="Color.Success" Clicked="() => _showPreview = !_showPreview">Change Views</Button>
        </Column>
        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
            @if (_amendment.AmendmentBodies.Any(x => x.IsLive))
            {
                <Button Color="Color.Danger" Block Size="Size.Large" Clicked="TakeAllDown">Take all down</Button>
            }
            else
            {
                <Button Color="Color.Success" Block Size="Size.Large" Clicked="AllGoLive">All Go Live</Button>
            }
        </Column>
        <Column ColumnSize="ColumnSize.Is4.OnDesktop" TextAlignment="TextAlignment.End">
            <Button Color="Color.Warning" Clicked="ResetAllPages">Reset All</Button>
            <Button Color="Color.Info" Clicked="AllPrevPage">All Prev</Button>
            <Button Color="Color.Info" Clicked="AllNextPage">All Next</Button>
        </Column>
    </Row>
    <Row Style="margin-top:10px;">
        <Repeater Items="@_amendment.AmendmentBodies.OrderBy(x => x.Id)">
            <Column ColumnSize="ColumnSize.Is4.OnDesktop">
                <ScreenControlItem 
                    Body="@context" 
                    LanguageName="@_languages.First(x => x.Id == context.LanguageId).LanguageName"
                    PrimaryLanguageId="_amendment.PrimaryLanguageId"
                    ShowPreview="@_showPreview"></ScreenControlItem> 
            </Column>
        </Repeater>
    </Row>
}
else
{
    <h4>No amendments are currently live</h4>
    <Button Color="Color.Primary" Type="ButtonType.Link" To=@("/Amendment")>Go to Amendments</Button>
}

@code {
    AmendmentFullBodyResponse? _amendment = null;
    List<LanguageResponse> _languages = new();
    bool _showPreview = true;
    protected override async Task OnInitializedAsync()
    {
        _languages = (await LanguageRepository.GetAsync()).ToList();
        _amendment = await AmendmentRepository.GetLiveAsync();
        HubEventService.AmendmentUpdated += AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated += AmendmentBodyUpdatedEvent;
        HubEventService.AmendmentBodyUpdatedMany += AmendmentBodyUpdatedEventMany;
        HubEventService.ClearScreens += ClearScreensEvent;
    }

    private void AmendmentBodyUpdatedEventMany(object? sender, SignalRResponse<List<AmendmentBodyResponse>> e)
    {
        foreach (var item in e.Value)
        {
            AmendmentBodyUpdatedWork(e.OperationType, item);
        }
        StateHasChanged();
    }

    private void AmendmentBodyUpdatedEvent(object? sender, SignalRResponse<AmendmentBodyResponse> e)
    {
        AmendmentBodyUpdatedWork(e.OperationType, e.Value);

        StateHasChanged();
    }

    private void AmendmentBodyUpdatedWork(OperationType operationType, AmendmentBodyResponse body)
    {
        if (_amendment == null)
            return;
        if (_amendment.Id != body.AmendId)
            return;

        switch (operationType)
        {
            case OperationType.Create:
                _amendment.AmendmentBodies.Add(body);
                break;
            case OperationType.Update:
                var i = _amendment.AmendmentBodies.FindIndex(x => x.Id == body.Id);
                if (i > -1)
                    _amendment.AmendmentBodies[i] = body;
                break;
            case OperationType.Delete:
                _amendment?.AmendmentBodies.RemoveAll(x => x.Id == body.Id);
                break;
        }
    }

    private async void AmendmentUpdatedEvent(object? sender, SignalRResponse<AmendmentResponse> e)
    {
        if (e.Value.IsLive)
        {
            _amendment = await AmendmentRepository.GetLiveAsync();
            StateHasChanged();
            return;
        }


        if (_amendment != null && _amendment.Id == e.Value.Id && !e.Value.IsLive)
        {
            _amendment = null;
            StateHasChanged();
        }
    }

    private async Task TakeAllDown()
    {
        if (_amendment == null)
            return;
        await AmendmentHubCommandService.SetAmendmentBodyLiveAsync(
            _amendment.AmendmentBodies.Where(x => x.IsLive).Select(x => new SetAmendmentBodyLiveCommand { AmendId = _amendment.Id, Id = x.Id, IsLive = false})
                .ToArray());
    }

    private async Task AllGoLive()
    {
        if (_amendment == null)
            return;

        await AmendmentHubCommandService.SetAmendmentBodyLiveAsync(
            _amendment.AmendmentBodies.Where(x => !x.IsLive).Select(x => new SetAmendmentBodyLiveCommand { AmendId = _amendment.Id, Id = x.Id, IsLive = true })
                .ToArray());
    }

    private void ClearScreensEvent(object? sender, EventArgs e) => _amendment = null;

    public void Dispose()
    {
        HubEventService.AmendmentUpdated -= AmendmentUpdatedEvent;
        HubEventService.AmendmentBodyUpdated -= AmendmentBodyUpdatedEvent;
        HubEventService.AmendmentBodyUpdatedMany -= AmendmentBodyUpdatedEventMany;
        HubEventService.ClearScreens -= ClearScreensEvent;
    }

    private async Task ResetAllPages()
    {
        if (_amendment == null)
            return;

        await AmendmentHubCommandService.SetAmendmentBodyPage(
            _amendment.AmendmentBodies.Select(x => new SetAmendmentBodyPageCommand { AmendId = _amendment.Id, Id = x.Id, Page = 0})
                .ToArray());
    }

    private async Task AllPrevPage()
    {
        if (_amendment == null)
            return;

        await AmendmentHubCommandService.SetAmendmentBodyPage(
            _amendment.AmendmentBodies.Select(x => new SetAmendmentBodyPageCommand { AmendId = _amendment.Id, Id = x.Id, Page = x.ChangeBodyPage(x.Page - 1) })
                .ToArray());

    }

    private async Task AllNextPage()
    {
        if (_amendment == null)
            return;

        await AmendmentHubCommandService.SetAmendmentBodyPage(
            _amendment.AmendmentBodies.Select(x => new SetAmendmentBodyPageCommand { AmendId = _amendment.Id, Id = x.Id, Page = x.ChangeBodyPage(x.Page + 1) })
                .ToArray());
    }

}
