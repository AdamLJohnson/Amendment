@page "/change-password"
@using Amendment.Shared.Requests
@using Amendment.Client.Repository
@using Microsoft.AspNetCore.Authorization
@using Amendment.Client.AuthProviders
@attribute [Authorize]
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<CustomPageTitle>Change Password</CustomPageTitle>

<h3>Change Password</h3>

@if (ShowSuccessMessage)
{
    <div class="alert alert-success" role="alert">
        Password changed successfully!
    </div>
}

@if (ShowErrorMessage)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Validations @ref="@_fluentValidations" Mode="ValidationMode.Manual" Model="@model" HandlerType="typeof(FluentValidationHandler)">
            @if (!IsFirstTimeLogin)
            {
                <Validation>
                    <Field>
                        <FieldLabel For="currentPassword">Current Password</FieldLabel>
                        <TextEdit id="currentPassword" @bind-Text="model.CurrentPassword" Role="TextRole.Password" Placeholder="Enter Current Password">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
            }
            <Validation>
                <Field>
                    <FieldLabel For="newPassword">New Password</FieldLabel>
                    <TextEdit id="newPassword" @bind-Text="model.NewPassword" Role="TextRole.Password" Placeholder="Enter New Password">
                        <Feedback>
                            <ValidationError/>
                            <FieldHelp>Password must be at least 8 characters and include uppercase, lowercase, number, and special character</FieldHelp>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
            <Validation>
                <Field>
                    <FieldLabel For="confirmPassword">Confirm New Password</FieldLabel>
                    <TextEdit id="confirmPassword" @bind-Text="model.ConfirmPassword" Role="TextRole.Password" Placeholder="Confirm New Password">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
        </Validations>
    </Column>
</Row>

<Button Color="Color.Primary" Clicked="@OnChangePassword">Change Password</Button>
@if (!IsFirstTimeLogin)
{
    <span></span>
    <Button Color="Color.Secondary" Clicked="@OnCancel">Cancel</Button>
}

@code {
    private Validations _fluentValidations = null!;
    private ChangePasswordRequest model = new();
    private bool ShowSuccessMessage = false;
    private bool ShowErrorMessage = false;
    private string ErrorMessage = string.Empty;
    private bool IsFirstTimeLogin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Check if user needs to change password
            var authResult = await AuthenticationService.RefreshToken();
            if (string.IsNullOrEmpty(authResult))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
        }

        // Get the RequirePasswordChange flag from the authentication state
        IsFirstTimeLogin = await AccountRepository.GetRequirePasswordChange();
        model.IsFirstTimeLogin = IsFirstTimeLogin;
    }

    private async Task OnChangePassword()
    {
        ShowSuccessMessage = false;
        ShowErrorMessage = false;

        if (await _fluentValidations.ValidateAll())
        {
            try
            {
                var result = await AccountRepository.ChangePassword(model);
                if (result)
                {
                    ShowSuccessMessage = true;
                    model = new ChangePasswordRequest();
                    StateHasChanged(); // Force UI update to show success message

                    // Clear any cached password change requirement
                    await Task.Delay(1500); // Show success message briefly
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    ShowErrorMessage = true;
                    ErrorMessage = "Failed to change password. Please try again.";
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessage = true;
                ErrorMessage = $"Error: {ex.Message}";
            }
        }

        StateHasChanged();
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
