@using Microsoft.AspNetCore.SignalR.Client
@using Amendment.Shared.Responses
@using Amendment.Client.Repository
@inject NavigationManager NavigationManager
@inject IHubEventService HubEventService
@implements IAsyncDisposable
@implements IDisposable

@code {

    private HubConnection? hubConnection;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/screenHub"))
            .Build();
            
        hubConnection.On<SignalRResponse<AmendmentResponse>>("AmendmentUpdate", response =>
        {
            HubEventService.OnAmendmentUpdated(response);
        });

        hubConnection.On<SignalRResponse<AmendmentBodyResponse>>("AmendmentBodyUpdate", response =>
        {
            HubEventService.OnAmendmentBodyUpdated(response);
        });

        hubConnection.On<SignalRResponse<SystemSettingResponse>>("SystemSettingUpdate", response =>
        {
            HubEventService.OnSystemSettingUpdated(response);
        });

        hubConnection.On("ClearScreens", () =>
        {
            HubEventService.OnClearScreens();
        });

        await hubConnection.StartAsync(); 
    }

    public void Dispose()
    {
        hubConnection?.DisposeAsync();
    }

    public ValueTask DisposeAsync()
    {
        hubConnection?.DisposeAsync();
        return ValueTask.CompletedTask;
    }

}
