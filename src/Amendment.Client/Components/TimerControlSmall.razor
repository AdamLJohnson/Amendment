@using Amendment.Client.Services
@inject ITimerControlHubCommandService TimerControlHubCommandService

<div class="row mt-2">
    <div class="col-lg">
        <Button Color="Color.Success" Clicked="() => { TimerControlHubCommandService.Start(); }" Block class="mt-2">Start</Button>
    </div>
    <div class="col-lg">
        <Button Color="Color.Danger" Clicked="() => { TimerControlHubCommandService.Pause(); }" Block class="mt-2">Stop</Button>
    </div>
    <div class="col-lg">
        <Button Color="Color.Warning" Clicked="() => { TimerControlHubCommandService.Reset(); }" Block class="mt-2">Reset</Button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(2 * 60); }" Block class="mt-2">2 Minutes</Button>
    </div>
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(3 * 60); }" Block class="mt-2">3 Minutes</Button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(4 * 60); }" Block class="mt-2">4 Minutes</Button>
    </div>
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(6 * 60); }" Block class="mt-2">6 Minutes</Button>
    </div>
</div>

@*<div class="row mt-2">
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(3 * 60); }" Block class="mt-2">3 Minutes</Button>
    </div>
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(5 * 60); }" Block class="mt-2">5 Minutes</Button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(6 * 60); }" Block class="mt-2">6 Minutes</Button>
    </div>
    <div class="col-lg">
        <Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(10 * 60); }" Block class="mt-2">10 Minutes</Button>
    </div>
</div>*@

<div class="row mt-2">
    <div class="col-lg-8 offset-lg-2">
        <TimerComponent></TimerComponent>
    </div>
</div>

@*<Button Color="Color.Success" Clicked="() => { TimerControlHubCommandService.Start(); }" Block class="mt-2">Start</Button>
<Button Color="Color.Danger" Clicked="() => { TimerControlHubCommandService.Pause(); }" Block class="mt-2">Stop</Button>
<Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(); }" Block class="mt-2">Reset</Button>
<Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(180); }" Block class="mt-2">3 Minutes</Button>
<Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(300); }" Block class="mt-2">5 Minutes</Button>
<Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(360); }" Block class="mt-2">6 Minutes</Button>
<Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset(600); }" Block class="mt-2">10 Minutes</Button>
<NumericEdit TValue="decimal?" @bind-Value="@minutes" class="mt-2" />
<Button Color="Color.Info" Clicked="() => { TimerControlHubCommandService.Reset((int)Math.Round((minutes ?? 1) * 60)); }" Block class="mt-2">Custom</Button>
*@
@*<TimerComponent></TimerComponent>*@

@code {
    protected override async Task OnInitializedAsync()
    {
        await TimerControlHubCommandService.Connect();
    }
}