@using System.Security.Claims
@model System.Collections.Generic.List<Amendment.Model.ViewModel.Amendment.AmendmentDetailsViewModel>

@{
    ViewBag.Title = "Amendments";
    Layout = "_Layout";
}

<h2>@ViewBag.Title</h2>

@Html.ActionLink("Create", "Create", null, null, new { @class = "btn btn-success pull-right" })

<div id="amendmentList">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Motion</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: amendments">
            <tr>
                <td data-bind="text: amendTitle"></td>
                <td data-bind="text: author"></td>
                <td data-bind="text: motion"></td>
                <td class="text-center">
                    <a data-bind="attr: { href: editUrl + '/' + id() }" class="btn btn-primary">Edit</a>
                    <a data-bind="attr: { href: deleteUrl + '/' + id() }" class="btn btn-danger">Delete</a>
                </td>
            </tr>
        </tbody>
    </table>
</div>


@section Scripts
    {
    <script type='text/javascript' src='~/lib/knockout/knockout-3.4.2.js'></script>

    <script>
        var initialData = @Json.Serialize(Model);
        var editUrl = '@Url.Action("Edit")';
        var deleteUrl = '@Url.Action("Delete")';
        
        var AmendmentModel = function(amendments) {
            var self = this;
            self.amendments = ko.observableArray(convertArrayToObservable(amendments));
            self.userRoles = usersRoles;

            $(document).on( "AmendmentChange", function(evt, results) {
                console.log(results);
                switch (results.results.operationType) {
                    case 1:
                        self.amendments.push(convertToObservable(results.data));
                        break;    
                    case 2:
                        var upIx = arrayFirstIndexOf(self.amendments(),
                            function (item) {
                                return item.id() === results.id;
                            });
                        if (upIx > -1) {
                            var oldItem = self.amendments()[upIx];
                            var newItem = convertToObservable(results.data);
                            self.amendments.replace(oldItem, newItem);
                        }
                        break;
                    case 3:
                        self.amendments.remove(function (item) { return item.id() === results.id; });
                        break;
                    default:
                }
            });
        };
 
        ko.applyBindings(new AmendmentModel(initialData), document.getElementById("amendmentList"));
    </script>
}
